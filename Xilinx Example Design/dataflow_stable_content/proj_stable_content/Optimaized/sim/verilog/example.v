// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="example,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=13.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.138000,HLS_SYN_LAT=35,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=476,HLS_SYN_LUT=1305,HLS_VERSION=2019_2}" *)

module example (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_strm_V_dout,
        in1_strm_V_empty_n,
        in1_strm_V_read,
        in2_strm_V_dout,
        in2_strm_V_empty_n,
        in2_strm_V_read,
        out_strm_V_din,
        out_strm_V_full_n,
        out_strm_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state4 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in1_strm_V_dout;
input   in1_strm_V_empty_n;
output   in1_strm_V_read;
input  [31:0] in2_strm_V_dout;
input   in2_strm_V_empty_n;
output   in2_strm_V_read;
output  [31:0] out_strm_V_din;
input   out_strm_V_full_n;
output   out_strm_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in1_strm_V_read;
reg in2_strm_V_read;
reg out_strm_V_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in1_strm_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln69_reg_125;
reg   [3:0] i_0_i_reg_87;
wire   [0:0] icmp_ln69_fu_108_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] i_fu_114_p2;
reg   [3:0] i_reg_129;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    tb_ce0;
wire   [31:0] tb_q0;
reg   [3:0] tb_address1;
reg    tb_ce1;
reg    tb_we1;
wire   [31:0] tb_q1;
wire    grp_readmem_fu_99_in_strm_V_read;
wire   [31:0] grp_readmem_fu_99_out_strm_V_din;
wire    grp_readmem_fu_99_out_strm_V_write;
wire   [3:0] grp_readmem_fu_99_tb_address0;
wire    grp_readmem_fu_99_tb_ce0;
wire   [31:0] grp_readmem_fu_99_tb_d0;
wire    grp_readmem_fu_99_tb_we0;
wire   [3:0] grp_readmem_fu_99_tb_address1;
wire    grp_readmem_fu_99_tb_ce1;
wire   [31:0] grp_readmem_fu_99_tb_d1;
wire    grp_readmem_fu_99_tb_we1;
wire    grp_readmem_fu_99_ap_start;
wire    grp_readmem_fu_99_ap_done;
wire    grp_readmem_fu_99_ap_ready;
wire    grp_readmem_fu_99_ap_idle;
reg    grp_readmem_fu_99_ap_continue;
reg   [3:0] ap_phi_mux_i_0_i_phi_fu_91_p4;
reg    grp_readmem_fu_99_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_sync_grp_readmem_fu_99_ap_ready;
wire    ap_sync_grp_readmem_fu_99_ap_done;
reg    ap_block_state5_on_subcall_done;
reg    ap_sync_reg_grp_readmem_fu_99_ap_ready;
reg    ap_sync_reg_grp_readmem_fu_99_ap_done;
wire   [63:0] zext_ln73_fu_120_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 grp_readmem_fu_99_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_readmem_fu_99_ap_ready = 1'b0;
#0 ap_sync_reg_grp_readmem_fu_99_ap_done = 1'b0;
end

example_tb #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
tb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_readmem_fu_99_tb_address0),
    .ce0(tb_ce0),
    .q0(tb_q0),
    .address1(tb_address1),
    .ce1(tb_ce1),
    .we1(tb_we1),
    .d1(in1_strm_V_dout),
    .q1(tb_q1)
);

readmem grp_readmem_fu_99(
    .in_strm_V_dout(in2_strm_V_dout),
    .in_strm_V_empty_n(in2_strm_V_empty_n),
    .in_strm_V_read(grp_readmem_fu_99_in_strm_V_read),
    .out_strm_V_din(grp_readmem_fu_99_out_strm_V_din),
    .out_strm_V_full_n(out_strm_V_full_n),
    .out_strm_V_write(grp_readmem_fu_99_out_strm_V_write),
    .tb_address0(grp_readmem_fu_99_tb_address0),
    .tb_ce0(grp_readmem_fu_99_tb_ce0),
    .tb_d0(grp_readmem_fu_99_tb_d0),
    .tb_q0(tb_q0),
    .tb_we0(grp_readmem_fu_99_tb_we0),
    .tb_address1(grp_readmem_fu_99_tb_address1),
    .tb_ce1(grp_readmem_fu_99_tb_ce1),
    .tb_d1(grp_readmem_fu_99_tb_d1),
    .tb_q1(tb_q1),
    .tb_we1(grp_readmem_fu_99_tb_we1),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_readmem_fu_99_ap_start),
    .ap_done(grp_readmem_fu_99_ap_done),
    .ap_ready(grp_readmem_fu_99_ap_ready),
    .ap_idle(grp_readmem_fu_99_ap_idle),
    .ap_continue(grp_readmem_fu_99_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_readmem_fu_99_ap_done <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
            ap_sync_reg_grp_readmem_fu_99_ap_done <= 1'b0;
        end else if ((grp_readmem_fu_99_ap_done == 1'b1)) begin
            ap_sync_reg_grp_readmem_fu_99_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_readmem_fu_99_ap_ready <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
            ap_sync_reg_grp_readmem_fu_99_ap_ready <= 1'b0;
        end else if ((grp_readmem_fu_99_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_readmem_fu_99_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_readmem_fu_99_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) | ((ap_sync_grp_readmem_fu_99_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state5)))) begin
            grp_readmem_fu_99_ap_start_reg <= 1'b1;
        end else if ((grp_readmem_fu_99_ap_ready == 1'b1)) begin
            grp_readmem_fu_99_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln69_reg_125 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_i_reg_87 <= i_reg_129;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_87 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_129 <= i_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln69_reg_125 <= icmp_ln69_fu_108_p2;
    end
end

always @ (*) begin
    if ((icmp_ln69_fu_108_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_reg_125 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_i_phi_fu_91_p4 = i_reg_129;
    end else begin
        ap_phi_mux_i_0_i_phi_fu_91_p4 = i_0_i_reg_87;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
        grp_readmem_fu_99_ap_continue = 1'b1;
    end else begin
        grp_readmem_fu_99_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_reg_125 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in1_strm_V_blk_n = in1_strm_V_empty_n;
    end else begin
        in1_strm_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln69_reg_125 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in1_strm_V_read = 1'b1;
    end else begin
        in1_strm_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in2_strm_V_read = grp_readmem_fu_99_in_strm_V_read;
    end else begin
        in2_strm_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_strm_V_write = grp_readmem_fu_99_out_strm_V_write;
    end else begin
        out_strm_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tb_address1 = zext_ln73_fu_120_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tb_address1 = grp_readmem_fu_99_tb_address1;
    end else begin
        tb_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tb_ce0 = grp_readmem_fu_99_tb_ce0;
    end else begin
        tb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tb_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tb_ce1 = grp_readmem_fu_99_tb_ce1;
    end else begin
        tb_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln69_reg_125 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tb_we1 = 1'b1;
    end else begin
        tb_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln69_fu_108_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln69_fu_108_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln69_reg_125 == 1'd0) & (in1_strm_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln69_reg_125 == 1'd0) & (in1_strm_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln69_reg_125 == 1'd0) & (in1_strm_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_on_subcall_done = ((ap_sync_grp_readmem_fu_99_ap_ready & ap_sync_grp_readmem_fu_99_ap_done) == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_sync_grp_readmem_fu_99_ap_done = (grp_readmem_fu_99_ap_done | ap_sync_reg_grp_readmem_fu_99_ap_done);

assign ap_sync_grp_readmem_fu_99_ap_ready = (grp_readmem_fu_99_ap_ready | ap_sync_reg_grp_readmem_fu_99_ap_ready);

assign grp_readmem_fu_99_ap_start = grp_readmem_fu_99_ap_start_reg;

assign i_fu_114_p2 = (ap_phi_mux_i_0_i_phi_fu_91_p4 + 4'd1);

assign icmp_ln69_fu_108_p2 = ((ap_phi_mux_i_0_i_phi_fu_91_p4 == 4'd10) ? 1'b1 : 1'b0);

assign out_strm_V_din = grp_readmem_fu_99_out_strm_V_din;

assign zext_ln73_fu_120_p1 = i_0_i_reg_87;

endmodule //example
