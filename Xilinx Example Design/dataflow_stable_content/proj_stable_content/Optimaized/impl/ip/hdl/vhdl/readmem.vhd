-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity readmem is
port (
    in_strm_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_strm_V_empty_n : IN STD_LOGIC;
    in_strm_V_read : OUT STD_LOGIC;
    out_strm_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_strm_V_full_n : IN STD_LOGIC;
    out_strm_V_write : OUT STD_LOGIC;
    tb_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tb_ce0 : OUT STD_LOGIC;
    tb_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tb_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tb_we0 : OUT STD_LOGIC;
    tb_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tb_ce1 : OUT STD_LOGIC;
    tb_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tb_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    tb_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of readmem is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal readmemA_U0_ap_start : STD_LOGIC;
    signal readmemA_U0_ap_done : STD_LOGIC;
    signal readmemA_U0_ap_continue : STD_LOGIC;
    signal readmemA_U0_ap_idle : STD_LOGIC;
    signal readmemA_U0_ap_ready : STD_LOGIC;
    signal readmemA_U0_req_strm_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal readmemA_U0_req_strm_V_write : STD_LOGIC;
    signal readmemA_U0_in_strm_V_read : STD_LOGIC;
    signal readmemA_U0_start_out : STD_LOGIC;
    signal readmemA_U0_start_write : STD_LOGIC;
    signal readmemA_U0_tb_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal readmemA_U0_tb_ce0 : STD_LOGIC;
    signal readmemB_U0_ap_start : STD_LOGIC;
    signal readmemB_U0_ap_done : STD_LOGIC;
    signal readmemB_U0_ap_continue : STD_LOGIC;
    signal readmemB_U0_ap_idle : STD_LOGIC;
    signal readmemB_U0_ap_ready : STD_LOGIC;
    signal readmemB_U0_req_strm_V_read : STD_LOGIC;
    signal readmemB_U0_out_strm_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal readmemB_U0_out_strm_V_write : STD_LOGIC;
    signal readmemB_U0_tb_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal readmemB_U0_tb_ce1 : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal req_strm_V_full_n : STD_LOGIC;
    signal req_strm_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal req_strm_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_readmemB_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_readmemB_U0_full_n : STD_LOGIC;
    signal start_for_readmemB_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_readmemB_U0_empty_n : STD_LOGIC;
    signal readmemB_U0_start_full_n : STD_LOGIC;
    signal readmemB_U0_start_write : STD_LOGIC;

    component readmemA IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        req_strm_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        req_strm_V_full_n : IN STD_LOGIC;
        req_strm_V_write : OUT STD_LOGIC;
        in_strm_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_strm_V_empty_n : IN STD_LOGIC;
        in_strm_V_read : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        tb_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        tb_ce0 : OUT STD_LOGIC;
        tb_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component readmemB IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        req_strm_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        req_strm_V_empty_n : IN STD_LOGIC;
        req_strm_V_read : OUT STD_LOGIC;
        out_strm_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_strm_V_full_n : IN STD_LOGIC;
        out_strm_V_write : OUT STD_LOGIC;
        tb_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        tb_ce1 : OUT STD_LOGIC;
        tb_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_readmembkb IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    readmemA_U0 : component readmemA
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => readmemA_U0_ap_start,
        start_full_n => start_for_readmemB_U0_full_n,
        ap_done => readmemA_U0_ap_done,
        ap_continue => readmemA_U0_ap_continue,
        ap_idle => readmemA_U0_ap_idle,
        ap_ready => readmemA_U0_ap_ready,
        req_strm_V_din => readmemA_U0_req_strm_V_din,
        req_strm_V_full_n => req_strm_V_full_n,
        req_strm_V_write => readmemA_U0_req_strm_V_write,
        in_strm_V_dout => in_strm_V_dout,
        in_strm_V_empty_n => in_strm_V_empty_n,
        in_strm_V_read => readmemA_U0_in_strm_V_read,
        start_out => readmemA_U0_start_out,
        start_write => readmemA_U0_start_write,
        tb_address0 => readmemA_U0_tb_address0,
        tb_ce0 => readmemA_U0_tb_ce0,
        tb_q0 => tb_q0);

    readmemB_U0 : component readmemB
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => readmemB_U0_ap_start,
        ap_done => readmemB_U0_ap_done,
        ap_continue => readmemB_U0_ap_continue,
        ap_idle => readmemB_U0_ap_idle,
        ap_ready => readmemB_U0_ap_ready,
        req_strm_V_dout => req_strm_V_dout,
        req_strm_V_empty_n => req_strm_V_empty_n,
        req_strm_V_read => readmemB_U0_req_strm_V_read,
        out_strm_V_din => readmemB_U0_out_strm_V_din,
        out_strm_V_full_n => out_strm_V_full_n,
        out_strm_V_write => readmemB_U0_out_strm_V_write,
        tb_address1 => readmemB_U0_tb_address1,
        tb_ce1 => readmemB_U0_tb_ce1,
        tb_q1 => tb_q1);

    req_strm_V_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => readmemA_U0_req_strm_V_din,
        if_full_n => req_strm_V_full_n,
        if_write => readmemA_U0_req_strm_V_write,
        if_dout => req_strm_V_dout,
        if_empty_n => req_strm_V_empty_n,
        if_read => readmemB_U0_req_strm_V_read);

    start_for_readmembkb_U : component start_for_readmembkb
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_readmemB_U0_din,
        if_full_n => start_for_readmemB_U0_full_n,
        if_write => readmemA_U0_start_write,
        if_dout => start_for_readmemB_U0_dout,
        if_empty_n => start_for_readmemB_U0_empty_n,
        if_read => readmemB_U0_ap_ready);




    ap_done <= readmemB_U0_ap_done;
    ap_idle <= (readmemB_U0_ap_idle and readmemA_U0_ap_idle);
    ap_ready <= readmemA_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= readmemB_U0_ap_done;
    ap_sync_ready <= readmemA_U0_ap_ready;
    in_strm_V_read <= readmemA_U0_in_strm_V_read;
    out_strm_V_din <= readmemB_U0_out_strm_V_din;
    out_strm_V_write <= readmemB_U0_out_strm_V_write;
    readmemA_U0_ap_continue <= ap_const_logic_1;
    readmemA_U0_ap_start <= ap_start;
    readmemB_U0_ap_continue <= ap_continue;
    readmemB_U0_ap_start <= start_for_readmemB_U0_empty_n;
    readmemB_U0_start_full_n <= ap_const_logic_1;
    readmemB_U0_start_write <= ap_const_logic_0;
    start_for_readmemB_U0_din <= (0=>ap_const_logic_1, others=>'-');
    tb_address0 <= readmemA_U0_tb_address0;
    tb_address1 <= readmemB_U0_tb_address1;
    tb_ce0 <= readmemA_U0_tb_ce0;
    tb_ce1 <= readmemB_U0_tb_ce1;
    tb_d0 <= ap_const_lv32_0;
    tb_d1 <= ap_const_lv32_0;
    tb_we0 <= ap_const_logic_0;
    tb_we1 <= ap_const_logic_0;
end behav;
