// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module readmem (
        in_strm_V_dout,
        in_strm_V_empty_n,
        in_strm_V_read,
        out_strm_V_din,
        out_strm_V_full_n,
        out_strm_V_write,
        tb_address0,
        tb_ce0,
        tb_d0,
        tb_q0,
        tb_we0,
        tb_address1,
        tb_ce1,
        tb_d1,
        tb_q1,
        tb_we1,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] in_strm_V_dout;
input   in_strm_V_empty_n;
output   in_strm_V_read;
output  [31:0] out_strm_V_din;
input   out_strm_V_full_n;
output   out_strm_V_write;
output  [3:0] tb_address0;
output   tb_ce0;
output  [31:0] tb_d0;
input  [31:0] tb_q0;
output   tb_we0;
output  [3:0] tb_address1;
output   tb_ce1;
output  [31:0] tb_d1;
input  [31:0] tb_q1;
output   tb_we1;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    readmemA_U0_ap_start;
wire    readmemA_U0_ap_done;
wire    readmemA_U0_ap_continue;
wire    readmemA_U0_ap_idle;
wire    readmemA_U0_ap_ready;
wire   [31:0] readmemA_U0_req_strm_V_din;
wire    readmemA_U0_req_strm_V_write;
wire    readmemA_U0_in_strm_V_read;
wire    readmemA_U0_start_out;
wire    readmemA_U0_start_write;
wire   [3:0] readmemA_U0_tb_address0;
wire    readmemA_U0_tb_ce0;
wire    readmemB_U0_ap_start;
wire    readmemB_U0_ap_done;
wire    readmemB_U0_ap_continue;
wire    readmemB_U0_ap_idle;
wire    readmemB_U0_ap_ready;
wire    readmemB_U0_req_strm_V_read;
wire   [31:0] readmemB_U0_out_strm_V_din;
wire    readmemB_U0_out_strm_V_write;
wire   [3:0] readmemB_U0_tb_address1;
wire    readmemB_U0_tb_ce1;
wire    ap_sync_continue;
wire    req_strm_V_full_n;
wire   [31:0] req_strm_V_dout;
wire    req_strm_V_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_readmemB_U0_din;
wire    start_for_readmemB_U0_full_n;
wire   [0:0] start_for_readmemB_U0_dout;
wire    start_for_readmemB_U0_empty_n;
wire    readmemB_U0_start_full_n;
wire    readmemB_U0_start_write;

readmemA readmemA_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(readmemA_U0_ap_start),
    .start_full_n(start_for_readmemB_U0_full_n),
    .ap_done(readmemA_U0_ap_done),
    .ap_continue(readmemA_U0_ap_continue),
    .ap_idle(readmemA_U0_ap_idle),
    .ap_ready(readmemA_U0_ap_ready),
    .req_strm_V_din(readmemA_U0_req_strm_V_din),
    .req_strm_V_full_n(req_strm_V_full_n),
    .req_strm_V_write(readmemA_U0_req_strm_V_write),
    .in_strm_V_dout(in_strm_V_dout),
    .in_strm_V_empty_n(in_strm_V_empty_n),
    .in_strm_V_read(readmemA_U0_in_strm_V_read),
    .start_out(readmemA_U0_start_out),
    .start_write(readmemA_U0_start_write),
    .tb_address0(readmemA_U0_tb_address0),
    .tb_ce0(readmemA_U0_tb_ce0),
    .tb_q0(tb_q0)
);

readmemB readmemB_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(readmemB_U0_ap_start),
    .ap_done(readmemB_U0_ap_done),
    .ap_continue(readmemB_U0_ap_continue),
    .ap_idle(readmemB_U0_ap_idle),
    .ap_ready(readmemB_U0_ap_ready),
    .req_strm_V_dout(req_strm_V_dout),
    .req_strm_V_empty_n(req_strm_V_empty_n),
    .req_strm_V_read(readmemB_U0_req_strm_V_read),
    .out_strm_V_din(readmemB_U0_out_strm_V_din),
    .out_strm_V_full_n(out_strm_V_full_n),
    .out_strm_V_write(readmemB_U0_out_strm_V_write),
    .tb_address1(readmemB_U0_tb_address1),
    .tb_ce1(readmemB_U0_tb_ce1),
    .tb_q1(tb_q1)
);

fifo_w32_d4_A req_strm_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(readmemA_U0_req_strm_V_din),
    .if_full_n(req_strm_V_full_n),
    .if_write(readmemA_U0_req_strm_V_write),
    .if_dout(req_strm_V_dout),
    .if_empty_n(req_strm_V_empty_n),
    .if_read(readmemB_U0_req_strm_V_read)
);

start_for_readmembkb start_for_readmembkb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_readmemB_U0_din),
    .if_full_n(start_for_readmemB_U0_full_n),
    .if_write(readmemA_U0_start_write),
    .if_dout(start_for_readmemB_U0_dout),
    .if_empty_n(start_for_readmemB_U0_empty_n),
    .if_read(readmemB_U0_ap_ready)
);

assign ap_done = readmemB_U0_ap_done;

assign ap_idle = (readmemB_U0_ap_idle & readmemA_U0_ap_idle);

assign ap_ready = readmemA_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = readmemB_U0_ap_done;

assign ap_sync_ready = readmemA_U0_ap_ready;

assign in_strm_V_read = readmemA_U0_in_strm_V_read;

assign out_strm_V_din = readmemB_U0_out_strm_V_din;

assign out_strm_V_write = readmemB_U0_out_strm_V_write;

assign readmemA_U0_ap_continue = 1'b1;

assign readmemA_U0_ap_start = ap_start;

assign readmemB_U0_ap_continue = ap_continue;

assign readmemB_U0_ap_start = start_for_readmemB_U0_empty_n;

assign readmemB_U0_start_full_n = 1'b1;

assign readmemB_U0_start_write = 1'b0;

assign start_for_readmemB_U0_din = 1'b1;

assign tb_address0 = readmemA_U0_tb_address0;

assign tb_address1 = readmemB_U0_tb_address1;

assign tb_ce0 = readmemA_U0_tb_ce0;

assign tb_ce1 = readmemB_U0_tb_ce1;

assign tb_d0 = 32'd0;

assign tb_d1 = 32'd0;

assign tb_we0 = 1'b0;

assign tb_we1 = 1'b0;

endmodule //readmem
