// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _readmemB_HH_
#define _readmemB_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct readmemB : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > req_strm_V_dout;
    sc_in< sc_logic > req_strm_V_empty_n;
    sc_out< sc_logic > req_strm_V_read;
    sc_out< sc_lv<32> > out_strm_V_din;
    sc_in< sc_logic > out_strm_V_full_n;
    sc_out< sc_logic > out_strm_V_write;
    sc_out< sc_lv<4> > tb_address1;
    sc_out< sc_logic > tb_ce1;
    sc_in< sc_lv<32> > tb_q1;


    // Module declarations
    readmemB(sc_module_name name);
    SC_HAS_PROCESS(readmemB);

    ~readmemB();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage9;
    sc_signal< bool > ap_block_state10_pp0_stage9_iter0;
    sc_signal< bool > ap_block_pp0_stage9_11001;
    sc_signal< sc_logic > req_strm_V_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage4;
    sc_signal< bool > ap_block_pp0_stage4;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage5;
    sc_signal< bool > ap_block_pp0_stage5;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage6;
    sc_signal< bool > ap_block_pp0_stage6;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage7;
    sc_signal< bool > ap_block_pp0_stage7;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage8;
    sc_signal< bool > ap_block_pp0_stage8;
    sc_signal< bool > ap_block_pp0_stage9;
    sc_signal< sc_logic > out_strm_V_blk_n;
    sc_signal< sc_lv<32> > reg_138;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< bool > ap_block_state3_pp0_stage2_iter0;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< bool > ap_block_state4_pp0_stage3_iter0;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< bool > ap_block_state5_pp0_stage4_iter0;
    sc_signal< bool > ap_block_pp0_stage4_11001;
    sc_signal< bool > ap_block_state6_pp0_stage5_iter0;
    sc_signal< bool > ap_block_pp0_stage5_11001;
    sc_signal< bool > ap_block_state7_pp0_stage6_iter0;
    sc_signal< bool > ap_block_pp0_stage6_11001;
    sc_signal< bool > ap_block_state8_pp0_stage7_iter0;
    sc_signal< bool > ap_block_pp0_stage7_11001;
    sc_signal< bool > ap_block_state9_pp0_stage8_iter0;
    sc_signal< bool > ap_block_pp0_stage8_11001;
    sc_signal< sc_lv<32> > tb_load_reg_326;
    sc_signal< bool > ap_block_state2_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<32> > tmp_1_reg_331;
    sc_signal< sc_lv<32> > select_ln45_1_fu_176_p3;
    sc_signal< sc_lv<32> > select_ln45_1_reg_341;
    sc_signal< sc_lv<32> > select_ln45_2_fu_194_p3;
    sc_signal< sc_lv<32> > select_ln45_2_reg_352;
    sc_signal< sc_lv<32> > select_ln45_3_fu_211_p3;
    sc_signal< sc_lv<32> > select_ln45_3_reg_363;
    sc_signal< sc_lv<32> > select_ln45_4_fu_228_p3;
    sc_signal< sc_lv<32> > select_ln45_4_reg_374;
    sc_signal< sc_lv<32> > select_ln45_5_fu_245_p3;
    sc_signal< sc_lv<32> > select_ln45_5_reg_385;
    sc_signal< sc_lv<32> > select_ln45_6_fu_262_p3;
    sc_signal< sc_lv<32> > select_ln45_6_reg_396;
    sc_signal< sc_lv<32> > select_ln45_7_fu_279_p3;
    sc_signal< sc_lv<32> > select_ln45_7_reg_407;
    sc_signal< sc_lv<32> > select_ln45_8_fu_296_p3;
    sc_signal< sc_lv<32> > select_ln45_8_reg_418;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0_reg;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage9_subdone;
    sc_signal< sc_lv<64> > sext_ln47_fu_148_p1;
    sc_signal< sc_lv<64> > sext_ln47_1_fu_153_p1;
    sc_signal< sc_lv<64> > sext_ln47_2_fu_184_p1;
    sc_signal< sc_lv<64> > sext_ln47_3_fu_201_p1;
    sc_signal< sc_lv<64> > sext_ln47_4_fu_218_p1;
    sc_signal< sc_lv<64> > sext_ln47_5_fu_235_p1;
    sc_signal< sc_lv<64> > sext_ln47_6_fu_252_p1;
    sc_signal< sc_lv<64> > sext_ln47_7_fu_269_p1;
    sc_signal< sc_lv<64> > sext_ln47_8_fu_286_p1;
    sc_signal< sc_lv<64> > sext_ln47_9_fu_303_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > sext_ln47_fu_148_p0;
    sc_signal< sc_lv<32> > sext_ln47_1_fu_153_p0;
    sc_signal< sc_lv<1> > grp_fu_142_p2;
    sc_signal< sc_lv<32> > select_ln45_fu_158_p3;
    sc_signal< sc_lv<1> > icmp_ln45_1_fu_165_p2;
    sc_signal< sc_lv<32> > add_ln48_fu_170_p2;
    sc_signal< sc_lv<32> > sext_ln47_2_fu_184_p0;
    sc_signal< sc_lv<32> > add_ln48_1_fu_189_p2;
    sc_signal< sc_lv<32> > sext_ln47_3_fu_201_p0;
    sc_signal< sc_lv<32> > add_ln48_2_fu_206_p2;
    sc_signal< sc_lv<32> > sext_ln47_4_fu_218_p0;
    sc_signal< sc_lv<32> > add_ln48_3_fu_223_p2;
    sc_signal< sc_lv<32> > sext_ln47_5_fu_235_p0;
    sc_signal< sc_lv<32> > add_ln48_4_fu_240_p2;
    sc_signal< sc_lv<32> > sext_ln47_6_fu_252_p0;
    sc_signal< sc_lv<32> > add_ln48_5_fu_257_p2;
    sc_signal< sc_lv<32> > sext_ln47_7_fu_269_p0;
    sc_signal< sc_lv<32> > add_ln48_6_fu_274_p2;
    sc_signal< sc_lv<32> > sext_ln47_8_fu_286_p0;
    sc_signal< sc_lv<32> > add_ln48_7_fu_291_p2;
    sc_signal< sc_lv<32> > sext_ln47_9_fu_303_p0;
    sc_signal< sc_lv<32> > add_ln48_8_fu_308_p2;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0_1to1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< bool > ap_block_pp0_stage4_subdone;
    sc_signal< bool > ap_block_pp0_stage5_subdone;
    sc_signal< bool > ap_block_pp0_stage6_subdone;
    sc_signal< bool > ap_block_pp0_stage7_subdone;
    sc_signal< bool > ap_block_pp0_stage8_subdone;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_pp0_stage0;
    static const sc_lv<10> ap_ST_fsm_pp0_stage1;
    static const sc_lv<10> ap_ST_fsm_pp0_stage2;
    static const sc_lv<10> ap_ST_fsm_pp0_stage3;
    static const sc_lv<10> ap_ST_fsm_pp0_stage4;
    static const sc_lv<10> ap_ST_fsm_pp0_stage5;
    static const sc_lv<10> ap_ST_fsm_pp0_stage6;
    static const sc_lv<10> ap_ST_fsm_pp0_stage7;
    static const sc_lv<10> ap_ST_fsm_pp0_stage8;
    static const sc_lv<10> ap_ST_fsm_pp0_stage9;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_9;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln48_1_fu_189_p2();
    void thread_add_ln48_2_fu_206_p2();
    void thread_add_ln48_3_fu_223_p2();
    void thread_add_ln48_4_fu_240_p2();
    void thread_add_ln48_5_fu_257_p2();
    void thread_add_ln48_6_fu_274_p2();
    void thread_add_ln48_7_fu_291_p2();
    void thread_add_ln48_8_fu_308_p2();
    void thread_add_ln48_fu_170_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_pp0_stage4();
    void thread_ap_CS_fsm_pp0_stage5();
    void thread_ap_CS_fsm_pp0_stage6();
    void thread_ap_CS_fsm_pp0_stage7();
    void thread_ap_CS_fsm_pp0_stage8();
    void thread_ap_CS_fsm_pp0_stage9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_pp0_stage4();
    void thread_ap_block_pp0_stage4_11001();
    void thread_ap_block_pp0_stage4_subdone();
    void thread_ap_block_pp0_stage5();
    void thread_ap_block_pp0_stage5_11001();
    void thread_ap_block_pp0_stage5_subdone();
    void thread_ap_block_pp0_stage6();
    void thread_ap_block_pp0_stage6_11001();
    void thread_ap_block_pp0_stage6_subdone();
    void thread_ap_block_pp0_stage7();
    void thread_ap_block_pp0_stage7_11001();
    void thread_ap_block_pp0_stage7_subdone();
    void thread_ap_block_pp0_stage8();
    void thread_ap_block_pp0_stage8_11001();
    void thread_ap_block_pp0_stage8_subdone();
    void thread_ap_block_pp0_stage9();
    void thread_ap_block_pp0_stage9_11001();
    void thread_ap_block_pp0_stage9_subdone();
    void thread_ap_block_state10_pp0_stage9_iter0();
    void thread_ap_block_state11_pp0_stage0_iter1();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage1_iter0();
    void thread_ap_block_state3_pp0_stage2_iter0();
    void thread_ap_block_state4_pp0_stage3_iter0();
    void thread_ap_block_state5_pp0_stage4_iter0();
    void thread_ap_block_state6_pp0_stage5_iter0();
    void thread_ap_block_state7_pp0_stage6_iter0();
    void thread_ap_block_state8_pp0_stage7_iter0();
    void thread_ap_block_state9_pp0_stage8_iter0();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_idle_pp0_1to1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_grp_fu_142_p2();
    void thread_icmp_ln45_1_fu_165_p2();
    void thread_out_strm_V_blk_n();
    void thread_out_strm_V_din();
    void thread_out_strm_V_write();
    void thread_req_strm_V_blk_n();
    void thread_req_strm_V_read();
    void thread_select_ln45_1_fu_176_p3();
    void thread_select_ln45_2_fu_194_p3();
    void thread_select_ln45_3_fu_211_p3();
    void thread_select_ln45_4_fu_228_p3();
    void thread_select_ln45_5_fu_245_p3();
    void thread_select_ln45_6_fu_262_p3();
    void thread_select_ln45_7_fu_279_p3();
    void thread_select_ln45_8_fu_296_p3();
    void thread_select_ln45_fu_158_p3();
    void thread_sext_ln47_1_fu_153_p0();
    void thread_sext_ln47_1_fu_153_p1();
    void thread_sext_ln47_2_fu_184_p0();
    void thread_sext_ln47_2_fu_184_p1();
    void thread_sext_ln47_3_fu_201_p0();
    void thread_sext_ln47_3_fu_201_p1();
    void thread_sext_ln47_4_fu_218_p0();
    void thread_sext_ln47_4_fu_218_p1();
    void thread_sext_ln47_5_fu_235_p0();
    void thread_sext_ln47_5_fu_235_p1();
    void thread_sext_ln47_6_fu_252_p0();
    void thread_sext_ln47_6_fu_252_p1();
    void thread_sext_ln47_7_fu_269_p0();
    void thread_sext_ln47_7_fu_269_p1();
    void thread_sext_ln47_8_fu_286_p0();
    void thread_sext_ln47_8_fu_286_p1();
    void thread_sext_ln47_9_fu_303_p0();
    void thread_sext_ln47_9_fu_303_p1();
    void thread_sext_ln47_fu_148_p0();
    void thread_sext_ln47_fu_148_p1();
    void thread_tb_address1();
    void thread_tb_ce1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
