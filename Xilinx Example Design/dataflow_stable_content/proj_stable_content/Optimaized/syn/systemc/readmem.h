// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _readmem_HH_
#define _readmem_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "readmemA.h"
#include "readmemB.h"
#include "fifo_w32_d4_A.h"
#include "start_for_readmembkb.h"

namespace ap_rtl {

struct readmem : public sc_module {
    // Port declarations 23
    sc_in< sc_lv<32> > in_strm_V_dout;
    sc_in< sc_logic > in_strm_V_empty_n;
    sc_out< sc_logic > in_strm_V_read;
    sc_out< sc_lv<32> > out_strm_V_din;
    sc_in< sc_logic > out_strm_V_full_n;
    sc_out< sc_logic > out_strm_V_write;
    sc_out< sc_lv<4> > tb_address0;
    sc_out< sc_logic > tb_ce0;
    sc_out< sc_lv<32> > tb_d0;
    sc_in< sc_lv<32> > tb_q0;
    sc_out< sc_logic > tb_we0;
    sc_out< sc_lv<4> > tb_address1;
    sc_out< sc_logic > tb_ce1;
    sc_out< sc_lv<32> > tb_d1;
    sc_in< sc_lv<32> > tb_q1;
    sc_out< sc_logic > tb_we1;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    readmem(sc_module_name name);
    SC_HAS_PROCESS(readmem);

    ~readmem();

    sc_trace_file* mVcdFile;

    readmemA* readmemA_U0;
    readmemB* readmemB_U0;
    fifo_w32_d4_A* req_strm_V_U;
    start_for_readmembkb* start_for_readmembkb_U;
    sc_signal< sc_logic > readmemA_U0_ap_start;
    sc_signal< sc_logic > readmemA_U0_ap_done;
    sc_signal< sc_logic > readmemA_U0_ap_continue;
    sc_signal< sc_logic > readmemA_U0_ap_idle;
    sc_signal< sc_logic > readmemA_U0_ap_ready;
    sc_signal< sc_lv<32> > readmemA_U0_req_strm_V_din;
    sc_signal< sc_logic > readmemA_U0_req_strm_V_write;
    sc_signal< sc_logic > readmemA_U0_in_strm_V_read;
    sc_signal< sc_logic > readmemA_U0_start_out;
    sc_signal< sc_logic > readmemA_U0_start_write;
    sc_signal< sc_lv<4> > readmemA_U0_tb_address0;
    sc_signal< sc_logic > readmemA_U0_tb_ce0;
    sc_signal< sc_logic > readmemB_U0_ap_start;
    sc_signal< sc_logic > readmemB_U0_ap_done;
    sc_signal< sc_logic > readmemB_U0_ap_continue;
    sc_signal< sc_logic > readmemB_U0_ap_idle;
    sc_signal< sc_logic > readmemB_U0_ap_ready;
    sc_signal< sc_logic > readmemB_U0_req_strm_V_read;
    sc_signal< sc_lv<32> > readmemB_U0_out_strm_V_din;
    sc_signal< sc_logic > readmemB_U0_out_strm_V_write;
    sc_signal< sc_lv<4> > readmemB_U0_tb_address1;
    sc_signal< sc_logic > readmemB_U0_tb_ce1;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > req_strm_V_full_n;
    sc_signal< sc_lv<32> > req_strm_V_dout;
    sc_signal< sc_logic > req_strm_V_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_readmemB_U0_din;
    sc_signal< sc_logic > start_for_readmemB_U0_full_n;
    sc_signal< sc_lv<1> > start_for_readmemB_U0_dout;
    sc_signal< sc_logic > start_for_readmemB_U0_empty_n;
    sc_signal< sc_logic > readmemB_U0_start_full_n;
    sc_signal< sc_logic > readmemB_U0_start_write;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_in_strm_V_read();
    void thread_out_strm_V_din();
    void thread_out_strm_V_write();
    void thread_readmemA_U0_ap_continue();
    void thread_readmemA_U0_ap_start();
    void thread_readmemB_U0_ap_continue();
    void thread_readmemB_U0_ap_start();
    void thread_readmemB_U0_start_full_n();
    void thread_readmemB_U0_start_write();
    void thread_start_for_readmemB_U0_din();
    void thread_tb_address0();
    void thread_tb_address1();
    void thread_tb_ce0();
    void thread_tb_ce1();
    void thread_tb_d0();
    void thread_tb_d1();
    void thread_tb_we0();
    void thread_tb_we1();
};

}

using namespace ap_rtl;

#endif
