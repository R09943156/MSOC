// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _readmemA_HH_
#define _readmemA_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct readmemA : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > req_strm_V_din;
    sc_in< sc_logic > req_strm_V_full_n;
    sc_out< sc_logic > req_strm_V_write;
    sc_in< sc_lv<32> > in_strm_V_dout;
    sc_in< sc_logic > in_strm_V_empty_n;
    sc_out< sc_logic > in_strm_V_read;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_out< sc_lv<4> > tb_address0;
    sc_out< sc_logic > tb_ce0;
    sc_in< sc_lv<32> > tb_q0;


    // Module declarations
    readmemA(sc_module_name name);
    SC_HAS_PROCESS(readmemA);

    ~readmemA();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage9;
    sc_signal< sc_lv<1> > icmp_ln25_7_reg_271;
    sc_signal< bool > ap_block_state10_pp0_stage9_iter0;
    sc_signal< bool > ap_block_pp0_stage9_11001;
    sc_signal< sc_logic > in_strm_V_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage4;
    sc_signal< bool > ap_block_pp0_stage4;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage5;
    sc_signal< bool > ap_block_pp0_stage5;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage6;
    sc_signal< bool > ap_block_pp0_stage6;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage7;
    sc_signal< bool > ap_block_pp0_stage7;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage8;
    sc_signal< bool > ap_block_pp0_stage8;
    sc_signal< bool > ap_block_pp0_stage9;
    sc_signal< sc_logic > req_strm_V_blk_n;
    sc_signal< sc_lv<1> > icmp_ln25_reg_208;
    sc_signal< sc_lv<1> > icmp_ln25_1_reg_217;
    sc_signal< sc_lv<1> > icmp_ln25_2_reg_226;
    sc_signal< sc_lv<1> > icmp_ln25_3_reg_235;
    sc_signal< sc_lv<1> > icmp_ln25_4_reg_244;
    sc_signal< sc_lv<1> > icmp_ln25_5_reg_253;
    sc_signal< sc_lv<1> > icmp_ln25_6_reg_262;
    sc_signal< sc_lv<1> > icmp_ln25_8_reg_280;
    sc_signal< sc_lv<1> > icmp_ln25_9_reg_289;
    sc_signal< sc_lv<32> > reg_143;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< bool > ap_block_state3_pp0_stage2_iter0;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< bool > ap_block_state5_pp0_stage4_iter0;
    sc_signal< bool > ap_block_pp0_stage4_11001;
    sc_signal< bool > ap_block_state7_pp0_stage6_iter0;
    sc_signal< bool > ap_block_pp0_stage6_11001;
    sc_signal< bool > ap_block_state9_pp0_stage8_iter0;
    sc_signal< bool > ap_block_pp0_stage8_11001;
    sc_signal< sc_lv<32> > reg_148;
    sc_signal< bool > ap_block_state2_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state12_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< bool > ap_block_state4_pp0_stage3_iter0;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< bool > ap_block_state6_pp0_stage5_iter0;
    sc_signal< bool > ap_block_pp0_stage5_11001;
    sc_signal< bool > ap_block_state8_pp0_stage7_iter0;
    sc_signal< bool > ap_block_pp0_stage7_11001;
    sc_signal< sc_lv<1> > grp_fu_137_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0_reg;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage9_subdone;
    sc_signal< sc_lv<64> > sext_ln24_fu_153_p1;
    sc_signal< sc_lv<64> > sext_ln24_1_fu_158_p1;
    sc_signal< sc_lv<64> > sext_ln24_2_fu_163_p1;
    sc_signal< sc_lv<64> > sext_ln24_3_fu_168_p1;
    sc_signal< sc_lv<64> > sext_ln24_4_fu_173_p1;
    sc_signal< sc_lv<64> > sext_ln24_5_fu_178_p1;
    sc_signal< sc_lv<64> > sext_ln24_6_fu_183_p1;
    sc_signal< sc_lv<64> > sext_ln24_7_fu_188_p1;
    sc_signal< sc_lv<64> > sext_ln24_8_fu_193_p1;
    sc_signal< sc_lv<64> > sext_ln24_9_fu_198_p1;
    sc_signal< bool > ap_block_pp0_stage2_01001;
    sc_signal< bool > ap_block_pp0_stage3_01001;
    sc_signal< bool > ap_block_pp0_stage4_01001;
    sc_signal< bool > ap_block_pp0_stage5_01001;
    sc_signal< bool > ap_block_pp0_stage6_01001;
    sc_signal< bool > ap_block_pp0_stage7_01001;
    sc_signal< bool > ap_block_pp0_stage8_01001;
    sc_signal< bool > ap_block_pp0_stage9_01001;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< bool > ap_block_pp0_stage1_01001;
    sc_signal< sc_lv<32> > sext_ln24_fu_153_p0;
    sc_signal< sc_lv<32> > sext_ln24_1_fu_158_p0;
    sc_signal< sc_lv<32> > sext_ln24_2_fu_163_p0;
    sc_signal< sc_lv<32> > sext_ln24_3_fu_168_p0;
    sc_signal< sc_lv<32> > sext_ln24_4_fu_173_p0;
    sc_signal< sc_lv<32> > sext_ln24_5_fu_178_p0;
    sc_signal< sc_lv<32> > sext_ln24_6_fu_183_p0;
    sc_signal< sc_lv<32> > sext_ln24_7_fu_188_p0;
    sc_signal< sc_lv<32> > sext_ln24_8_fu_193_p0;
    sc_signal< sc_lv<32> > sext_ln24_9_fu_198_p0;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_idle_pp0_1to1;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< bool > ap_block_pp0_stage4_subdone;
    sc_signal< bool > ap_block_pp0_stage5_subdone;
    sc_signal< bool > ap_block_pp0_stage6_subdone;
    sc_signal< bool > ap_block_pp0_stage7_subdone;
    sc_signal< bool > ap_block_pp0_stage8_subdone;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_pp0_stage0;
    static const sc_lv<10> ap_ST_fsm_pp0_stage1;
    static const sc_lv<10> ap_ST_fsm_pp0_stage2;
    static const sc_lv<10> ap_ST_fsm_pp0_stage3;
    static const sc_lv<10> ap_ST_fsm_pp0_stage4;
    static const sc_lv<10> ap_ST_fsm_pp0_stage5;
    static const sc_lv<10> ap_ST_fsm_pp0_stage6;
    static const sc_lv<10> ap_ST_fsm_pp0_stage7;
    static const sc_lv<10> ap_ST_fsm_pp0_stage8;
    static const sc_lv<10> ap_ST_fsm_pp0_stage9;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_A;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_pp0_stage4();
    void thread_ap_CS_fsm_pp0_stage5();
    void thread_ap_CS_fsm_pp0_stage6();
    void thread_ap_CS_fsm_pp0_stage7();
    void thread_ap_CS_fsm_pp0_stage8();
    void thread_ap_CS_fsm_pp0_stage9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_01001();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_01001();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_01001();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_pp0_stage4();
    void thread_ap_block_pp0_stage4_01001();
    void thread_ap_block_pp0_stage4_11001();
    void thread_ap_block_pp0_stage4_subdone();
    void thread_ap_block_pp0_stage5();
    void thread_ap_block_pp0_stage5_01001();
    void thread_ap_block_pp0_stage5_11001();
    void thread_ap_block_pp0_stage5_subdone();
    void thread_ap_block_pp0_stage6();
    void thread_ap_block_pp0_stage6_01001();
    void thread_ap_block_pp0_stage6_11001();
    void thread_ap_block_pp0_stage6_subdone();
    void thread_ap_block_pp0_stage7();
    void thread_ap_block_pp0_stage7_01001();
    void thread_ap_block_pp0_stage7_11001();
    void thread_ap_block_pp0_stage7_subdone();
    void thread_ap_block_pp0_stage8();
    void thread_ap_block_pp0_stage8_01001();
    void thread_ap_block_pp0_stage8_11001();
    void thread_ap_block_pp0_stage8_subdone();
    void thread_ap_block_pp0_stage9();
    void thread_ap_block_pp0_stage9_01001();
    void thread_ap_block_pp0_stage9_11001();
    void thread_ap_block_pp0_stage9_subdone();
    void thread_ap_block_state10_pp0_stage9_iter0();
    void thread_ap_block_state11_pp0_stage0_iter1();
    void thread_ap_block_state12_pp0_stage1_iter1();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage1_iter0();
    void thread_ap_block_state3_pp0_stage2_iter0();
    void thread_ap_block_state4_pp0_stage3_iter0();
    void thread_ap_block_state5_pp0_stage4_iter0();
    void thread_ap_block_state6_pp0_stage5_iter0();
    void thread_ap_block_state7_pp0_stage6_iter0();
    void thread_ap_block_state8_pp0_stage7_iter0();
    void thread_ap_block_state9_pp0_stage8_iter0();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_idle_pp0_1to1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_grp_fu_137_p2();
    void thread_in_strm_V_blk_n();
    void thread_in_strm_V_read();
    void thread_internal_ap_ready();
    void thread_real_start();
    void thread_req_strm_V_blk_n();
    void thread_req_strm_V_din();
    void thread_req_strm_V_write();
    void thread_sext_ln24_1_fu_158_p0();
    void thread_sext_ln24_1_fu_158_p1();
    void thread_sext_ln24_2_fu_163_p0();
    void thread_sext_ln24_2_fu_163_p1();
    void thread_sext_ln24_3_fu_168_p0();
    void thread_sext_ln24_3_fu_168_p1();
    void thread_sext_ln24_4_fu_173_p0();
    void thread_sext_ln24_4_fu_173_p1();
    void thread_sext_ln24_5_fu_178_p0();
    void thread_sext_ln24_5_fu_178_p1();
    void thread_sext_ln24_6_fu_183_p0();
    void thread_sext_ln24_6_fu_183_p1();
    void thread_sext_ln24_7_fu_188_p0();
    void thread_sext_ln24_7_fu_188_p1();
    void thread_sext_ln24_8_fu_193_p0();
    void thread_sext_ln24_8_fu_193_p1();
    void thread_sext_ln24_9_fu_198_p0();
    void thread_sext_ln24_9_fu_198_p1();
    void thread_sext_ln24_fu_153_p0();
    void thread_sext_ln24_fu_153_p1();
    void thread_start_out();
    void thread_start_write();
    void thread_tb_address0();
    void thread_tb_ce0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
