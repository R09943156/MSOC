// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "readmem.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic readmem::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> readmem::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<4> readmem::ap_const_lv4_0 = "0000";
const sc_logic readmem::ap_const_logic_1 = sc_dt::Log_1;

readmem::readmem(sc_module_name name) : sc_module(name), mVcdFile(0) {
    readmemA_U0 = new readmemA("readmemA_U0");
    readmemA_U0->ap_clk(ap_clk);
    readmemA_U0->ap_rst(ap_rst);
    readmemA_U0->ap_start(readmemA_U0_ap_start);
    readmemA_U0->start_full_n(start_for_readmemB_U0_full_n);
    readmemA_U0->ap_done(readmemA_U0_ap_done);
    readmemA_U0->ap_continue(readmemA_U0_ap_continue);
    readmemA_U0->ap_idle(readmemA_U0_ap_idle);
    readmemA_U0->ap_ready(readmemA_U0_ap_ready);
    readmemA_U0->req_strm_V_din(readmemA_U0_req_strm_V_din);
    readmemA_U0->req_strm_V_full_n(req_strm_V_full_n);
    readmemA_U0->req_strm_V_write(readmemA_U0_req_strm_V_write);
    readmemA_U0->in_strm_V_dout(in_strm_V_dout);
    readmemA_U0->in_strm_V_empty_n(in_strm_V_empty_n);
    readmemA_U0->in_strm_V_read(readmemA_U0_in_strm_V_read);
    readmemA_U0->start_out(readmemA_U0_start_out);
    readmemA_U0->start_write(readmemA_U0_start_write);
    readmemA_U0->tb_address0(readmemA_U0_tb_address0);
    readmemA_U0->tb_ce0(readmemA_U0_tb_ce0);
    readmemA_U0->tb_q0(tb_q0);
    readmemB_U0 = new readmemB("readmemB_U0");
    readmemB_U0->ap_clk(ap_clk);
    readmemB_U0->ap_rst(ap_rst);
    readmemB_U0->ap_start(readmemB_U0_ap_start);
    readmemB_U0->ap_done(readmemB_U0_ap_done);
    readmemB_U0->ap_continue(readmemB_U0_ap_continue);
    readmemB_U0->ap_idle(readmemB_U0_ap_idle);
    readmemB_U0->ap_ready(readmemB_U0_ap_ready);
    readmemB_U0->req_strm_V_dout(req_strm_V_dout);
    readmemB_U0->req_strm_V_empty_n(req_strm_V_empty_n);
    readmemB_U0->req_strm_V_read(readmemB_U0_req_strm_V_read);
    readmemB_U0->out_strm_V_din(readmemB_U0_out_strm_V_din);
    readmemB_U0->out_strm_V_full_n(out_strm_V_full_n);
    readmemB_U0->out_strm_V_write(readmemB_U0_out_strm_V_write);
    readmemB_U0->tb_address1(readmemB_U0_tb_address1);
    readmemB_U0->tb_ce1(readmemB_U0_tb_ce1);
    readmemB_U0->tb_q1(tb_q1);
    req_strm_V_U = new fifo_w32_d4_A("req_strm_V_U");
    req_strm_V_U->clk(ap_clk);
    req_strm_V_U->reset(ap_rst);
    req_strm_V_U->if_read_ce(ap_var_for_const0);
    req_strm_V_U->if_write_ce(ap_var_for_const0);
    req_strm_V_U->if_din(readmemA_U0_req_strm_V_din);
    req_strm_V_U->if_full_n(req_strm_V_full_n);
    req_strm_V_U->if_write(readmemA_U0_req_strm_V_write);
    req_strm_V_U->if_dout(req_strm_V_dout);
    req_strm_V_U->if_empty_n(req_strm_V_empty_n);
    req_strm_V_U->if_read(readmemB_U0_req_strm_V_read);
    start_for_readmembkb_U = new start_for_readmembkb("start_for_readmembkb_U");
    start_for_readmembkb_U->clk(ap_clk);
    start_for_readmembkb_U->reset(ap_rst);
    start_for_readmembkb_U->if_read_ce(ap_var_for_const0);
    start_for_readmembkb_U->if_write_ce(ap_var_for_const0);
    start_for_readmembkb_U->if_din(start_for_readmemB_U0_din);
    start_for_readmembkb_U->if_full_n(start_for_readmemB_U0_full_n);
    start_for_readmembkb_U->if_write(readmemA_U0_start_write);
    start_for_readmembkb_U->if_dout(start_for_readmemB_U0_dout);
    start_for_readmembkb_U->if_empty_n(start_for_readmemB_U0_empty_n);
    start_for_readmembkb_U->if_read(readmemB_U0_ap_ready);

    SC_METHOD(thread_ap_done);
    sensitive << ( readmemB_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( readmemA_U0_ap_idle );
    sensitive << ( readmemB_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( readmemA_U0_ap_ready );

    SC_METHOD(thread_ap_sync_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( readmemB_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( readmemA_U0_ap_ready );

    SC_METHOD(thread_in_strm_V_read);
    sensitive << ( readmemA_U0_in_strm_V_read );

    SC_METHOD(thread_out_strm_V_din);
    sensitive << ( readmemB_U0_out_strm_V_din );

    SC_METHOD(thread_out_strm_V_write);
    sensitive << ( readmemB_U0_out_strm_V_write );

    SC_METHOD(thread_readmemA_U0_ap_continue);

    SC_METHOD(thread_readmemA_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_readmemB_U0_ap_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_readmemB_U0_ap_start);
    sensitive << ( start_for_readmemB_U0_empty_n );

    SC_METHOD(thread_readmemB_U0_start_full_n);

    SC_METHOD(thread_readmemB_U0_start_write);

    SC_METHOD(thread_start_for_readmemB_U0_din);

    SC_METHOD(thread_tb_address0);
    sensitive << ( readmemA_U0_tb_address0 );

    SC_METHOD(thread_tb_address1);
    sensitive << ( readmemB_U0_tb_address1 );

    SC_METHOD(thread_tb_ce0);
    sensitive << ( readmemA_U0_tb_ce0 );

    SC_METHOD(thread_tb_ce1);
    sensitive << ( readmemB_U0_tb_ce1 );

    SC_METHOD(thread_tb_d0);

    SC_METHOD(thread_tb_d1);

    SC_METHOD(thread_tb_we0);

    SC_METHOD(thread_tb_we1);

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "readmem_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, in_strm_V_dout, "(port)in_strm_V_dout");
    sc_trace(mVcdFile, in_strm_V_empty_n, "(port)in_strm_V_empty_n");
    sc_trace(mVcdFile, in_strm_V_read, "(port)in_strm_V_read");
    sc_trace(mVcdFile, out_strm_V_din, "(port)out_strm_V_din");
    sc_trace(mVcdFile, out_strm_V_full_n, "(port)out_strm_V_full_n");
    sc_trace(mVcdFile, out_strm_V_write, "(port)out_strm_V_write");
    sc_trace(mVcdFile, tb_address0, "(port)tb_address0");
    sc_trace(mVcdFile, tb_ce0, "(port)tb_ce0");
    sc_trace(mVcdFile, tb_d0, "(port)tb_d0");
    sc_trace(mVcdFile, tb_q0, "(port)tb_q0");
    sc_trace(mVcdFile, tb_we0, "(port)tb_we0");
    sc_trace(mVcdFile, tb_address1, "(port)tb_address1");
    sc_trace(mVcdFile, tb_ce1, "(port)tb_ce1");
    sc_trace(mVcdFile, tb_d1, "(port)tb_d1");
    sc_trace(mVcdFile, tb_q1, "(port)tb_q1");
    sc_trace(mVcdFile, tb_we1, "(port)tb_we1");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, readmemA_U0_ap_start, "readmemA_U0_ap_start");
    sc_trace(mVcdFile, readmemA_U0_ap_done, "readmemA_U0_ap_done");
    sc_trace(mVcdFile, readmemA_U0_ap_continue, "readmemA_U0_ap_continue");
    sc_trace(mVcdFile, readmemA_U0_ap_idle, "readmemA_U0_ap_idle");
    sc_trace(mVcdFile, readmemA_U0_ap_ready, "readmemA_U0_ap_ready");
    sc_trace(mVcdFile, readmemA_U0_req_strm_V_din, "readmemA_U0_req_strm_V_din");
    sc_trace(mVcdFile, readmemA_U0_req_strm_V_write, "readmemA_U0_req_strm_V_write");
    sc_trace(mVcdFile, readmemA_U0_in_strm_V_read, "readmemA_U0_in_strm_V_read");
    sc_trace(mVcdFile, readmemA_U0_start_out, "readmemA_U0_start_out");
    sc_trace(mVcdFile, readmemA_U0_start_write, "readmemA_U0_start_write");
    sc_trace(mVcdFile, readmemA_U0_tb_address0, "readmemA_U0_tb_address0");
    sc_trace(mVcdFile, readmemA_U0_tb_ce0, "readmemA_U0_tb_ce0");
    sc_trace(mVcdFile, readmemB_U0_ap_start, "readmemB_U0_ap_start");
    sc_trace(mVcdFile, readmemB_U0_ap_done, "readmemB_U0_ap_done");
    sc_trace(mVcdFile, readmemB_U0_ap_continue, "readmemB_U0_ap_continue");
    sc_trace(mVcdFile, readmemB_U0_ap_idle, "readmemB_U0_ap_idle");
    sc_trace(mVcdFile, readmemB_U0_ap_ready, "readmemB_U0_ap_ready");
    sc_trace(mVcdFile, readmemB_U0_req_strm_V_read, "readmemB_U0_req_strm_V_read");
    sc_trace(mVcdFile, readmemB_U0_out_strm_V_din, "readmemB_U0_out_strm_V_din");
    sc_trace(mVcdFile, readmemB_U0_out_strm_V_write, "readmemB_U0_out_strm_V_write");
    sc_trace(mVcdFile, readmemB_U0_tb_address1, "readmemB_U0_tb_address1");
    sc_trace(mVcdFile, readmemB_U0_tb_ce1, "readmemB_U0_tb_ce1");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, req_strm_V_full_n, "req_strm_V_full_n");
    sc_trace(mVcdFile, req_strm_V_dout, "req_strm_V_dout");
    sc_trace(mVcdFile, req_strm_V_empty_n, "req_strm_V_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, start_for_readmemB_U0_din, "start_for_readmemB_U0_din");
    sc_trace(mVcdFile, start_for_readmemB_U0_full_n, "start_for_readmemB_U0_full_n");
    sc_trace(mVcdFile, start_for_readmemB_U0_dout, "start_for_readmemB_U0_dout");
    sc_trace(mVcdFile, start_for_readmemB_U0_empty_n, "start_for_readmemB_U0_empty_n");
    sc_trace(mVcdFile, readmemB_U0_start_full_n, "readmemB_U0_start_full_n");
    sc_trace(mVcdFile, readmemB_U0_start_write, "readmemB_U0_start_write");
#endif

    }
}

readmem::~readmem() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete readmemA_U0;
    delete readmemB_U0;
    delete req_strm_V_U;
    delete start_for_readmembkb_U;
}

void readmem::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void readmem::thread_ap_done() {
    ap_done = readmemB_U0_ap_done.read();
}

void readmem::thread_ap_idle() {
    ap_idle = (readmemA_U0_ap_idle.read() & readmemB_U0_ap_idle.read());
}

void readmem::thread_ap_ready() {
    ap_ready = readmemA_U0_ap_ready.read();
}

void readmem::thread_ap_sync_continue() {
    ap_sync_continue = ap_continue.read();
}

void readmem::thread_ap_sync_done() {
    ap_sync_done = readmemB_U0_ap_done.read();
}

void readmem::thread_ap_sync_ready() {
    ap_sync_ready = readmemA_U0_ap_ready.read();
}

void readmem::thread_in_strm_V_read() {
    in_strm_V_read = readmemA_U0_in_strm_V_read.read();
}

void readmem::thread_out_strm_V_din() {
    out_strm_V_din = readmemB_U0_out_strm_V_din.read();
}

void readmem::thread_out_strm_V_write() {
    out_strm_V_write = readmemB_U0_out_strm_V_write.read();
}

void readmem::thread_readmemA_U0_ap_continue() {
    readmemA_U0_ap_continue = ap_const_logic_1;
}

void readmem::thread_readmemA_U0_ap_start() {
    readmemA_U0_ap_start = ap_start.read();
}

void readmem::thread_readmemB_U0_ap_continue() {
    readmemB_U0_ap_continue = ap_continue.read();
}

void readmem::thread_readmemB_U0_ap_start() {
    readmemB_U0_ap_start = start_for_readmemB_U0_empty_n.read();
}

void readmem::thread_readmemB_U0_start_full_n() {
    readmemB_U0_start_full_n = ap_const_logic_1;
}

void readmem::thread_readmemB_U0_start_write() {
    readmemB_U0_start_write = ap_const_logic_0;
}

void readmem::thread_start_for_readmemB_U0_din() {
    start_for_readmemB_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void readmem::thread_tb_address0() {
    tb_address0 = readmemA_U0_tb_address0.read();
}

void readmem::thread_tb_address1() {
    tb_address1 = readmemB_U0_tb_address1.read();
}

void readmem::thread_tb_ce0() {
    tb_ce0 = readmemA_U0_tb_ce0.read();
}

void readmem::thread_tb_ce1() {
    tb_ce1 = readmemB_U0_tb_ce1.read();
}

void readmem::thread_tb_d0() {
    tb_d0 = ap_const_lv32_0;
}

void readmem::thread_tb_d1() {
    tb_d1 = ap_const_lv32_0;
}

void readmem::thread_tb_we0() {
    tb_we0 = ap_const_logic_0;
}

void readmem::thread_tb_we1() {
    tb_we1 = ap_const_logic_0;
}

}

