-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in1_strm_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in1_strm_V_empty_n : IN STD_LOGIC;
    in1_strm_V_read : OUT STD_LOGIC;
    in2_strm_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in2_strm_V_empty_n : IN STD_LOGIC;
    in2_strm_V_read : OUT STD_LOGIC;
    out_strm_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_strm_V_full_n : IN STD_LOGIC;
    out_strm_V_write : OUT STD_LOGIC );
end;


architecture behav of example is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "example,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=13.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.888000,HLS_SYN_LAT=54,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=99,HLS_SYN_LUT=401,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in1_strm_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln65_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_141_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tb_ce0 : STD_LOGIC;
    signal tb_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tb_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tb_ce1 : STD_LOGIC;
    signal tb_we1 : STD_LOGIC;
    signal grp_readmem_fu_126_ap_start : STD_LOGIC;
    signal grp_readmem_fu_126_ap_done : STD_LOGIC;
    signal grp_readmem_fu_126_ap_idle : STD_LOGIC;
    signal grp_readmem_fu_126_ap_ready : STD_LOGIC;
    signal grp_readmem_fu_126_in_strm_V_read : STD_LOGIC;
    signal grp_readmem_fu_126_out_strm_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_readmem_fu_126_out_strm_V_write : STD_LOGIC;
    signal grp_readmem_fu_126_tb_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readmem_fu_126_tb_ce0 : STD_LOGIC;
    signal i_0_i_reg_115 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_readmem_fu_126_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state2_ignore_call0 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln68_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component readmem IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_strm_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in_strm_V_empty_n : IN STD_LOGIC;
        in_strm_V_read : OUT STD_LOGIC;
        out_strm_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_strm_V_full_n : IN STD_LOGIC;
        out_strm_V_write : OUT STD_LOGIC;
        tb_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        tb_ce0 : OUT STD_LOGIC;
        tb_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component example_tb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    tb_U : component example_tb
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_readmem_fu_126_tb_address0,
        ce0 => tb_ce0,
        q0 => tb_q0,
        address1 => tb_address1,
        ce1 => tb_ce1,
        we1 => tb_we1,
        d1 => in1_strm_V_dout);

    grp_readmem_fu_126 : component readmem
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_readmem_fu_126_ap_start,
        ap_done => grp_readmem_fu_126_ap_done,
        ap_idle => grp_readmem_fu_126_ap_idle,
        ap_ready => grp_readmem_fu_126_ap_ready,
        in_strm_V_dout => in2_strm_V_dout,
        in_strm_V_empty_n => in2_strm_V_empty_n,
        in_strm_V_read => grp_readmem_fu_126_in_strm_V_read,
        out_strm_V_din => grp_readmem_fu_126_out_strm_V_din,
        out_strm_V_full_n => out_strm_V_full_n,
        out_strm_V_write => grp_readmem_fu_126_out_strm_V_write,
        tb_address0 => grp_readmem_fu_126_tb_address0,
        tb_ce0 => grp_readmem_fu_126_tb_ce0,
        tb_q0 => tb_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_readmem_fu_126_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_readmem_fu_126_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((icmp_ln65_fu_135_p2 = ap_const_lv1_0) and (in1_strm_V_empty_n = ap_const_logic_0))) and (icmp_ln65_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_readmem_fu_126_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_readmem_fu_126_ap_ready = ap_const_logic_1)) then 
                    grp_readmem_fu_126_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln65_fu_135_p2 = ap_const_lv1_0) and (in1_strm_V_empty_n = ap_const_logic_0))) and (icmp_ln65_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_reg_115 <= i_fu_141_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_115 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, in1_strm_V_empty_n, ap_CS_fsm_state2, icmp_ln65_fu_135_p2, grp_readmem_fu_126_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln65_fu_135_p2 = ap_const_lv1_0) and (in1_strm_V_empty_n = ap_const_logic_0))) and (icmp_ln65_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln65_fu_135_p2 = ap_const_lv1_0) and (in1_strm_V_empty_n = ap_const_logic_0))) and (icmp_ln65_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_readmem_fu_126_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state2_assign_proc : process(in1_strm_V_empty_n, icmp_ln65_fu_135_p2)
    begin
                ap_block_state2 <= ((icmp_ln65_fu_135_p2 = ap_const_lv1_0) and (in1_strm_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_ignore_call0_assign_proc : process(in1_strm_V_empty_n, icmp_ln65_fu_135_p2)
    begin
                ap_block_state2_ignore_call0 <= ((icmp_ln65_fu_135_p2 = ap_const_lv1_0) and (in1_strm_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(grp_readmem_fu_126_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_readmem_fu_126_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_readmem_fu_126_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_readmem_fu_126_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_readmem_fu_126_ap_start <= grp_readmem_fu_126_ap_start_reg;
    i_fu_141_p2 <= std_logic_vector(unsigned(i_0_i_reg_115) + unsigned(ap_const_lv4_1));
    icmp_ln65_fu_135_p2 <= "1" when (i_0_i_reg_115 = ap_const_lv4_A) else "0";

    in1_strm_V_blk_n_assign_proc : process(in1_strm_V_empty_n, ap_CS_fsm_state2, icmp_ln65_fu_135_p2)
    begin
        if (((icmp_ln65_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in1_strm_V_blk_n <= in1_strm_V_empty_n;
        else 
            in1_strm_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in1_strm_V_read_assign_proc : process(in1_strm_V_empty_n, ap_CS_fsm_state2, icmp_ln65_fu_135_p2)
    begin
        if ((not(((icmp_ln65_fu_135_p2 = ap_const_lv1_0) and (in1_strm_V_empty_n = ap_const_logic_0))) and (icmp_ln65_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in1_strm_V_read <= ap_const_logic_1;
        else 
            in1_strm_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in2_strm_V_read_assign_proc : process(grp_readmem_fu_126_in_strm_V_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in2_strm_V_read <= grp_readmem_fu_126_in_strm_V_read;
        else 
            in2_strm_V_read <= ap_const_logic_0;
        end if; 
    end process;

    out_strm_V_din <= grp_readmem_fu_126_out_strm_V_din;

    out_strm_V_write_assign_proc : process(grp_readmem_fu_126_out_strm_V_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_strm_V_write <= grp_readmem_fu_126_out_strm_V_write;
        else 
            out_strm_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tb_address1 <= zext_ln68_fu_147_p1(4 - 1 downto 0);

    tb_ce0_assign_proc : process(grp_readmem_fu_126_tb_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tb_ce0 <= grp_readmem_fu_126_tb_ce0;
        else 
            tb_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tb_ce1_assign_proc : process(in1_strm_V_empty_n, ap_CS_fsm_state2, icmp_ln65_fu_135_p2)
    begin
        if ((not(((icmp_ln65_fu_135_p2 = ap_const_lv1_0) and (in1_strm_V_empty_n = ap_const_logic_0))) and (icmp_ln65_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tb_ce1 <= ap_const_logic_1;
        else 
            tb_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tb_we1_assign_proc : process(in1_strm_V_empty_n, ap_CS_fsm_state2, icmp_ln65_fu_135_p2)
    begin
        if ((not(((icmp_ln65_fu_135_p2 = ap_const_lv1_0) and (in1_strm_V_empty_n = ap_const_logic_0))) and (icmp_ln65_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tb_we1 <= ap_const_logic_1;
        else 
            tb_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln68_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_115),64));
end behav;
