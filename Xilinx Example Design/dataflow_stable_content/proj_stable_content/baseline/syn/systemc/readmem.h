// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _readmem_HH_
#define _readmem_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fifo_w32_d4_A.h"

namespace ap_rtl {

struct readmem : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > in_strm_V_dout;
    sc_in< sc_logic > in_strm_V_empty_n;
    sc_out< sc_logic > in_strm_V_read;
    sc_out< sc_lv<32> > out_strm_V_din;
    sc_in< sc_logic > out_strm_V_full_n;
    sc_out< sc_logic > out_strm_V_write;
    sc_out< sc_lv<4> > tb_address0;
    sc_out< sc_logic > tb_ce0;
    sc_in< sc_lv<32> > tb_q0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    readmem(sc_module_name name);
    SC_HAS_PROCESS(readmem);

    ~readmem();

    sc_trace_file* mVcdFile;

    fifo_w32_d4_A* req_strm_V_fifo_U;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > in_strm_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln20_fu_181_p2;
    sc_signal< sc_logic > out_strm_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln40_fu_204_p2;
    sc_signal< sc_lv<4> > i_1_fu_187_p2;
    sc_signal< sc_lv<4> > i_1_reg_249;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<32> > tmp_reg_254;
    sc_signal< sc_lv<4> > i_fu_210_p2;
    sc_signal< sc_lv<4> > i_reg_270;
    sc_signal< sc_lv<32> > req_strm_V_dout;
    sc_signal< sc_logic > req_strm_V_empty_n;
    sc_signal< sc_logic > req_strm_V_read;
    sc_signal< bool > ap_block_state4;
    sc_signal< sc_lv<1> > icmp_ln43_fu_216_p2;
    sc_signal< sc_lv<1> > icmp_ln43_reg_275;
    sc_signal< sc_lv<32> > sum_1_fu_233_p3;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > i_0_i_reg_146;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > req_strm_V_din;
    sc_signal< sc_logic > req_strm_V_full_n;
    sc_signal< sc_logic > req_strm_V_write;
    sc_signal< sc_lv<1> > icmp_ln24_fu_198_p2;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<32> > tmp_1_reg_157;
    sc_signal< sc_lv<4> > i_0_i2_reg_170;
    sc_signal< sc_lv<64> > sext_ln23_fu_193_p1;
    sc_signal< sc_lv<64> > sext_ln45_fu_222_p1;
    sc_signal< sc_lv<32> > sext_ln23_fu_193_p0;
    sc_signal< sc_lv<32> > icmp_ln43_fu_216_p0;
    sc_signal< sc_lv<32> > sext_ln45_fu_222_p0;
    sc_signal< sc_lv<32> > sum_fu_227_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< bool > ap_condition_121;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_A;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_state2();
    void thread_ap_block_state3();
    void thread_ap_block_state4();
    void thread_ap_condition_121();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_1_fu_187_p2();
    void thread_i_fu_210_p2();
    void thread_icmp_ln20_fu_181_p2();
    void thread_icmp_ln24_fu_198_p2();
    void thread_icmp_ln40_fu_204_p2();
    void thread_icmp_ln43_fu_216_p0();
    void thread_icmp_ln43_fu_216_p2();
    void thread_in_strm_V_blk_n();
    void thread_in_strm_V_read();
    void thread_out_strm_V_blk_n();
    void thread_out_strm_V_din();
    void thread_out_strm_V_write();
    void thread_req_strm_V_din();
    void thread_req_strm_V_read();
    void thread_req_strm_V_write();
    void thread_sext_ln23_fu_193_p0();
    void thread_sext_ln23_fu_193_p1();
    void thread_sext_ln45_fu_222_p0();
    void thread_sext_ln45_fu_222_p1();
    void thread_sum_1_fu_233_p3();
    void thread_sum_fu_227_p2();
    void thread_tb_address0();
    void thread_tb_ce0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
