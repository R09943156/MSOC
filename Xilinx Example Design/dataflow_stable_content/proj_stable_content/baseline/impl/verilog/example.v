// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="example,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=13.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.888000,HLS_SYN_LAT=54,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=99,HLS_SYN_LUT=401,HLS_VERSION=2019_2}" *)

module example (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_strm_V_dout,
        in1_strm_V_empty_n,
        in1_strm_V_read,
        in2_strm_V_dout,
        in2_strm_V_empty_n,
        in2_strm_V_read,
        out_strm_V_din,
        out_strm_V_full_n,
        out_strm_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in1_strm_V_dout;
input   in1_strm_V_empty_n;
output   in1_strm_V_read;
input  [31:0] in2_strm_V_dout;
input   in2_strm_V_empty_n;
output   in2_strm_V_read;
output  [31:0] out_strm_V_din;
input   out_strm_V_full_n;
output   out_strm_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in1_strm_V_read;
reg in2_strm_V_read;
reg out_strm_V_write;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in1_strm_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln65_fu_135_p2;
wire   [3:0] i_fu_141_p2;
reg    ap_block_state2;
reg    tb_ce0;
wire   [31:0] tb_q0;
wire   [3:0] tb_address1;
reg    tb_ce1;
reg    tb_we1;
wire    grp_readmem_fu_126_ap_start;
wire    grp_readmem_fu_126_ap_done;
wire    grp_readmem_fu_126_ap_idle;
wire    grp_readmem_fu_126_ap_ready;
wire    grp_readmem_fu_126_in_strm_V_read;
wire   [31:0] grp_readmem_fu_126_out_strm_V_din;
wire    grp_readmem_fu_126_out_strm_V_write;
wire   [3:0] grp_readmem_fu_126_tb_address0;
wire    grp_readmem_fu_126_tb_ce0;
reg   [3:0] i_0_i_reg_115;
reg    grp_readmem_fu_126_ap_start_reg;
reg    ap_block_state2_ignore_call0;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln68_fu_147_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_readmem_fu_126_ap_start_reg = 1'b0;
end

example_tb #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
tb_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_readmem_fu_126_tb_address0),
    .ce0(tb_ce0),
    .q0(tb_q0),
    .address1(tb_address1),
    .ce1(tb_ce1),
    .we1(tb_we1),
    .d1(in1_strm_V_dout)
);

readmem grp_readmem_fu_126(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_readmem_fu_126_ap_start),
    .ap_done(grp_readmem_fu_126_ap_done),
    .ap_idle(grp_readmem_fu_126_ap_idle),
    .ap_ready(grp_readmem_fu_126_ap_ready),
    .in_strm_V_dout(in2_strm_V_dout),
    .in_strm_V_empty_n(in2_strm_V_empty_n),
    .in_strm_V_read(grp_readmem_fu_126_in_strm_V_read),
    .out_strm_V_din(grp_readmem_fu_126_out_strm_V_din),
    .out_strm_V_full_n(out_strm_V_full_n),
    .out_strm_V_write(grp_readmem_fu_126_out_strm_V_write),
    .tb_address0(grp_readmem_fu_126_tb_address0),
    .tb_ce0(grp_readmem_fu_126_tb_ce0),
    .tb_q0(tb_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_readmem_fu_126_ap_start_reg <= 1'b0;
    end else begin
        if ((~((icmp_ln65_fu_135_p2 == 1'd0) & (in1_strm_V_empty_n == 1'b0)) & (icmp_ln65_fu_135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_readmem_fu_126_ap_start_reg <= 1'b1;
        end else if ((grp_readmem_fu_126_ap_ready == 1'b1)) begin
            grp_readmem_fu_126_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln65_fu_135_p2 == 1'd0) & (in1_strm_V_empty_n == 1'b0)) & (icmp_ln65_fu_135_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_reg_115 <= i_fu_141_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_115 <= 4'd0;
    end
end

always @ (*) begin
    if (((grp_readmem_fu_126_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_readmem_fu_126_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln65_fu_135_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in1_strm_V_blk_n = in1_strm_V_empty_n;
    end else begin
        in1_strm_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln65_fu_135_p2 == 1'd0) & (in1_strm_V_empty_n == 1'b0)) & (icmp_ln65_fu_135_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in1_strm_V_read = 1'b1;
    end else begin
        in1_strm_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in2_strm_V_read = grp_readmem_fu_126_in_strm_V_read;
    end else begin
        in2_strm_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_strm_V_write = grp_readmem_fu_126_out_strm_V_write;
    end else begin
        out_strm_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tb_ce0 = grp_readmem_fu_126_tb_ce0;
    end else begin
        tb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln65_fu_135_p2 == 1'd0) & (in1_strm_V_empty_n == 1'b0)) & (icmp_ln65_fu_135_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tb_ce1 = 1'b1;
    end else begin
        tb_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln65_fu_135_p2 == 1'd0) & (in1_strm_V_empty_n == 1'b0)) & (icmp_ln65_fu_135_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tb_we1 = 1'b1;
    end else begin
        tb_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln65_fu_135_p2 == 1'd0) & (in1_strm_V_empty_n == 1'b0)) & (icmp_ln65_fu_135_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln65_fu_135_p2 == 1'd0) & (in1_strm_V_empty_n == 1'b0)) & (icmp_ln65_fu_135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_readmem_fu_126_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state2 = ((icmp_ln65_fu_135_p2 == 1'd0) & (in1_strm_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_ignore_call0 = ((icmp_ln65_fu_135_p2 == 1'd0) & (in1_strm_V_empty_n == 1'b0));
end

assign grp_readmem_fu_126_ap_start = grp_readmem_fu_126_ap_start_reg;

assign i_fu_141_p2 = (i_0_i_reg_115 + 4'd1);

assign icmp_ln65_fu_135_p2 = ((i_0_i_reg_115 == 4'd10) ? 1'b1 : 1'b0);

assign out_strm_V_din = grp_readmem_fu_126_out_strm_V_din;

assign tb_address1 = zext_ln68_fu_147_p1;

assign zext_ln68_fu_147_p1 = i_0_i_reg_115;

endmodule //example
