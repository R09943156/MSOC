-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity readmem is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_strm_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_strm_V_empty_n : IN STD_LOGIC;
    in_strm_V_read : OUT STD_LOGIC;
    out_strm_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_strm_V_full_n : IN STD_LOGIC;
    out_strm_V_write : OUT STD_LOGIC;
    tb_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    tb_ce0 : OUT STD_LOGIC;
    tb_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of readmem is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_strm_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln20_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_strm_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln40_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_187_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_249 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_210_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_270 : STD_LOGIC_VECTOR (3 downto 0);
    signal req_strm_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal req_strm_V_empty_n : STD_LOGIC;
    signal req_strm_V_read : STD_LOGIC;
    signal ap_block_state4 : BOOLEAN;
    signal icmp_ln43_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_275 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_1_fu_233_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_0_i_reg_146 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal req_strm_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal req_strm_V_full_n : STD_LOGIC;
    signal req_strm_V_write : STD_LOGIC;
    signal icmp_ln24_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_1_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i2_reg_170 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln23_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln45_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln23_fu_193_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln43_fu_216_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln45_fu_222_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_condition_121 : BOOLEAN;

    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    req_strm_V_fifo_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => req_strm_V_din,
        if_full_n => req_strm_V_full_n,
        if_write => req_strm_V_write,
        if_dout => req_strm_V_dout,
        if_empty_n => req_strm_V_empty_n,
        if_read => req_strm_V_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_i2_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_i2_reg_170 <= i_reg_270;
            elsif ((not(((icmp_ln20_fu_181_p2 = ap_const_lv1_0) and (in_strm_V_empty_n = ap_const_logic_0))) and (icmp_ln20_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i2_reg_170 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln24_fu_198_p2 = ap_const_lv1_1) and (req_strm_V_full_n = ap_const_logic_0)) or ((icmp_ln24_fu_198_p2 = ap_const_lv1_0) and (req_strm_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_reg_146 <= i_1_reg_249;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_i_reg_146 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tmp_1_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                tmp_1_reg_157 <= sum_1_fu_233_p3;
            elsif ((not(((icmp_ln20_fu_181_p2 = ap_const_lv1_0) and (in_strm_V_empty_n = ap_const_logic_0))) and (icmp_ln20_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                tmp_1_reg_157 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln20_fu_181_p2 = ap_const_lv1_0) and (in_strm_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_1_reg_249 <= i_1_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln40_fu_204_p2 = ap_const_lv1_0) and (req_strm_V_empty_n = ap_const_logic_0)) or ((icmp_ln40_fu_204_p2 = ap_const_lv1_1) and (out_strm_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                i_reg_270 <= i_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln40_fu_204_p2 = ap_const_lv1_0) and (req_strm_V_empty_n = ap_const_logic_0)) or ((icmp_ln40_fu_204_p2 = ap_const_lv1_1) and (out_strm_V_full_n = ap_const_logic_0)))) and (icmp_ln40_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                icmp_ln43_reg_275 <= icmp_ln43_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln20_fu_181_p2 = ap_const_lv1_0) and (in_strm_V_empty_n = ap_const_logic_0))) and (icmp_ln20_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_254 <= in_strm_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, in_strm_V_empty_n, out_strm_V_full_n, ap_CS_fsm_state2, icmp_ln20_fu_181_p2, ap_CS_fsm_state4, icmp_ln40_fu_204_p2, req_strm_V_empty_n, ap_CS_fsm_state3, req_strm_V_full_n, icmp_ln24_fu_198_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln20_fu_181_p2 = ap_const_lv1_0) and (in_strm_V_empty_n = ap_const_logic_0))) and (icmp_ln20_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((icmp_ln20_fu_181_p2 = ap_const_lv1_0) and (in_strm_V_empty_n = ap_const_logic_0))) and (icmp_ln20_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not((((icmp_ln24_fu_198_p2 = ap_const_lv1_1) and (req_strm_V_full_n = ap_const_logic_0)) or ((icmp_ln24_fu_198_p2 = ap_const_lv1_0) and (req_strm_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not((((icmp_ln40_fu_204_p2 = ap_const_lv1_0) and (req_strm_V_empty_n = ap_const_logic_0)) or ((icmp_ln40_fu_204_p2 = ap_const_lv1_1) and (out_strm_V_full_n = ap_const_logic_0)))) and (icmp_ln40_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((icmp_ln40_fu_204_p2 = ap_const_lv1_0) and (req_strm_V_empty_n = ap_const_logic_0)) or ((icmp_ln40_fu_204_p2 = ap_const_lv1_1) and (out_strm_V_full_n = ap_const_logic_0)))) and (icmp_ln40_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state2_assign_proc : process(in_strm_V_empty_n, icmp_ln20_fu_181_p2)
    begin
                ap_block_state2 <= ((icmp_ln20_fu_181_p2 = ap_const_lv1_0) and (in_strm_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(req_strm_V_full_n, icmp_ln24_fu_198_p2)
    begin
                ap_block_state3 <= (((icmp_ln24_fu_198_p2 = ap_const_lv1_1) and (req_strm_V_full_n = ap_const_logic_0)) or ((icmp_ln24_fu_198_p2 = ap_const_lv1_0) and (req_strm_V_full_n = ap_const_logic_0)));
    end process;


    ap_block_state4_assign_proc : process(out_strm_V_full_n, icmp_ln40_fu_204_p2, req_strm_V_empty_n)
    begin
                ap_block_state4 <= (((icmp_ln40_fu_204_p2 = ap_const_lv1_0) and (req_strm_V_empty_n = ap_const_logic_0)) or ((icmp_ln40_fu_204_p2 = ap_const_lv1_1) and (out_strm_V_full_n = ap_const_logic_0)));
    end process;


    ap_condition_121_assign_proc : process(ap_CS_fsm_state3, req_strm_V_full_n, icmp_ln24_fu_198_p2)
    begin
                ap_condition_121 <= (not((((icmp_ln24_fu_198_p2 = ap_const_lv1_1) and (req_strm_V_full_n = ap_const_logic_0)) or ((icmp_ln24_fu_198_p2 = ap_const_lv1_0) and (req_strm_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, out_strm_V_full_n, ap_CS_fsm_state4, icmp_ln40_fu_204_p2, req_strm_V_empty_n)
    begin
        if (((not((((icmp_ln40_fu_204_p2 = ap_const_lv1_0) and (req_strm_V_empty_n = ap_const_logic_0)) or ((icmp_ln40_fu_204_p2 = ap_const_lv1_1) and (out_strm_V_full_n = ap_const_logic_0)))) and (icmp_ln40_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_strm_V_full_n, ap_CS_fsm_state4, icmp_ln40_fu_204_p2, req_strm_V_empty_n)
    begin
        if ((not((((icmp_ln40_fu_204_p2 = ap_const_lv1_0) and (req_strm_V_empty_n = ap_const_logic_0)) or ((icmp_ln40_fu_204_p2 = ap_const_lv1_1) and (out_strm_V_full_n = ap_const_logic_0)))) and (icmp_ln40_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_187_p2 <= std_logic_vector(unsigned(i_0_i_reg_146) + unsigned(ap_const_lv4_1));
    i_fu_210_p2 <= std_logic_vector(unsigned(i_0_i2_reg_170) + unsigned(ap_const_lv4_1));
    icmp_ln20_fu_181_p2 <= "1" when (i_0_i_reg_146 = ap_const_lv4_A) else "0";
    icmp_ln24_fu_198_p2 <= "1" when (signed(tb_q0) < signed(ap_const_lv32_A)) else "0";
    icmp_ln40_fu_204_p2 <= "1" when (i_0_i2_reg_170 = ap_const_lv4_A) else "0";
    icmp_ln43_fu_216_p0 <= req_strm_V_dout;
    icmp_ln43_fu_216_p2 <= "1" when (icmp_ln43_fu_216_p0 = ap_const_lv32_0) else "0";

    in_strm_V_blk_n_assign_proc : process(in_strm_V_empty_n, ap_CS_fsm_state2, icmp_ln20_fu_181_p2)
    begin
        if (((icmp_ln20_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_strm_V_blk_n <= in_strm_V_empty_n;
        else 
            in_strm_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_strm_V_read_assign_proc : process(in_strm_V_empty_n, ap_CS_fsm_state2, icmp_ln20_fu_181_p2)
    begin
        if ((not(((icmp_ln20_fu_181_p2 = ap_const_lv1_0) and (in_strm_V_empty_n = ap_const_logic_0))) and (icmp_ln20_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_strm_V_read <= ap_const_logic_1;
        else 
            in_strm_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_strm_V_blk_n_assign_proc : process(out_strm_V_full_n, ap_CS_fsm_state4, icmp_ln40_fu_204_p2)
    begin
        if (((icmp_ln40_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            out_strm_V_blk_n <= out_strm_V_full_n;
        else 
            out_strm_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_strm_V_din <= tmp_1_reg_157;

    out_strm_V_write_assign_proc : process(out_strm_V_full_n, ap_CS_fsm_state4, icmp_ln40_fu_204_p2, req_strm_V_empty_n)
    begin
        if ((not((((icmp_ln40_fu_204_p2 = ap_const_lv1_0) and (req_strm_V_empty_n = ap_const_logic_0)) or ((icmp_ln40_fu_204_p2 = ap_const_lv1_1) and (out_strm_V_full_n = ap_const_logic_0)))) and (icmp_ln40_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            out_strm_V_write <= ap_const_logic_1;
        else 
            out_strm_V_write <= ap_const_logic_0;
        end if; 
    end process;


    req_strm_V_din_assign_proc : process(tmp_reg_254, icmp_ln24_fu_198_p2, ap_condition_121)
    begin
        if ((ap_const_boolean_1 = ap_condition_121)) then
            if ((icmp_ln24_fu_198_p2 = ap_const_lv1_1)) then 
                req_strm_V_din <= tmp_reg_254;
            elsif ((icmp_ln24_fu_198_p2 = ap_const_lv1_0)) then 
                req_strm_V_din <= ap_const_lv32_0;
            else 
                req_strm_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            req_strm_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    req_strm_V_read_assign_proc : process(out_strm_V_full_n, ap_CS_fsm_state4, icmp_ln40_fu_204_p2, req_strm_V_empty_n)
    begin
        if ((not((((icmp_ln40_fu_204_p2 = ap_const_lv1_0) and (req_strm_V_empty_n = ap_const_logic_0)) or ((icmp_ln40_fu_204_p2 = ap_const_lv1_1) and (out_strm_V_full_n = ap_const_logic_0)))) and (icmp_ln40_fu_204_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            req_strm_V_read <= ap_const_logic_1;
        else 
            req_strm_V_read <= ap_const_logic_0;
        end if; 
    end process;


    req_strm_V_write_assign_proc : process(ap_CS_fsm_state3, req_strm_V_full_n, icmp_ln24_fu_198_p2)
    begin
        if (((not((((icmp_ln24_fu_198_p2 = ap_const_lv1_1) and (req_strm_V_full_n = ap_const_logic_0)) or ((icmp_ln24_fu_198_p2 = ap_const_lv1_0) and (req_strm_V_full_n = ap_const_logic_0)))) and (icmp_ln24_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not((((icmp_ln24_fu_198_p2 = ap_const_lv1_1) and (req_strm_V_full_n = ap_const_logic_0)) or ((icmp_ln24_fu_198_p2 = ap_const_lv1_0) and (req_strm_V_full_n = ap_const_logic_0)))) and (icmp_ln24_fu_198_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            req_strm_V_write <= ap_const_logic_1;
        else 
            req_strm_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sext_ln23_fu_193_p0 <= in_strm_V_dout;
        sext_ln23_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_fu_193_p0),64));

    sext_ln45_fu_222_p0 <= req_strm_V_dout;
        sext_ln45_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln45_fu_222_p0),64));

    sum_1_fu_233_p3 <= 
        tmp_1_reg_157 when (icmp_ln43_reg_275(0) = '1') else 
        sum_fu_227_p2;
    sum_fu_227_p2 <= std_logic_vector(unsigned(tb_q0) + unsigned(tmp_1_reg_157));

    tb_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, sext_ln23_fu_193_p1, sext_ln45_fu_222_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tb_address0 <= sext_ln45_fu_222_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tb_address0 <= sext_ln23_fu_193_p1(4 - 1 downto 0);
        else 
            tb_address0 <= "XXXX";
        end if; 
    end process;


    tb_ce0_assign_proc : process(in_strm_V_empty_n, out_strm_V_full_n, ap_CS_fsm_state2, icmp_ln20_fu_181_p2, ap_CS_fsm_state4, icmp_ln40_fu_204_p2, req_strm_V_empty_n)
    begin
        if (((not((((icmp_ln40_fu_204_p2 = ap_const_lv1_0) and (req_strm_V_empty_n = ap_const_logic_0)) or ((icmp_ln40_fu_204_p2 = ap_const_lv1_1) and (out_strm_V_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((icmp_ln20_fu_181_p2 = ap_const_lv1_0) and (in_strm_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            tb_ce0 <= ap_const_logic_1;
        else 
            tb_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
